/*
Под вашим контролем находятся n студентов и вам нужно составить ровно две команды, состоящие из некоторого подмножества ваших студентов. У каждого студента есть свой собственный навык, навык i-го студента обозначен числом ai (у различных студентов могут быть одинаковые навыки).

Итак, о командах. Во-первых, эти две команды должны быть одинакового размера. Есть еще два требования:

Первая команда должна состоять из студентов с различными навыками (то есть нет одинаковых навыков среди студентов первой команды).
Вторая команда должна состоять из студентов с одинаковыми навыками (то есть все навыки среди студентов второй команды равны между собой).
Отметим, что допустимо, что какой-то студент первой команды имеет такой же навык, как и студент второй команды.

Рассмотрим несколько примеров (перечислены навыки для команд):

[1,2,3], [4,4] не являются подходящей парой команд, потому что их размеры должны быть одинаковыми;
[1,1,2], [3,3,3] не являются подходящей парой команд, потому что первая команда не должна включать студентов с одинаковыми навыками;
[1,2,3], [3,4,4] не являются подходящей парой команд, потому что вторая команда должна включать студентов с одинаковыми навыками;
[1,2,3], [3,3,3] — подходящая пара команд;
[5], [6] — тоже подходящая пара команд.
Ваша задача — найти максимально возможный размер команд x, для которого возможно составить подходящую пару команд, где каждая команда имеет размер x (в первой команде все навыки различны, во второй — все навыки равны между собой). Студент не может входить более чем в одну команду.

Вам нужно ответить на t независимых наборов входных данных

 */
using System;
using System.Linq;
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {

            int n = int.Parse(Console.ReadLine()), m = 0;
            int max, s;
            for(int i = 0; i < n; i++)
            {
                m = int.Parse(Console.ReadLine());
                int[] mas = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();
                max = 0;
                s = -1;
                for (int j = 0; j < m; j++)
                    if (max < mas[j])
                        max = mas[j];
                int[] check = new int[max+1];
                for(int j = 0; j < m; j++)
                {
                    check[mas[j]] += 1;
                    if (check[mas[j]] == 1)
                        s += 1;
                }
                
                Array.Sort(check);
                if (check[max] - s > 1)
                    check[0] = 1;
                Console.WriteLine(s < check[max] ?  check[0] + s : check[max]);
            }
        }
    }
}